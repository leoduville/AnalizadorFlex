
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package app;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import app.nodes.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\100\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\005\000\002\004\004\000\002\004\003" +
    "\000\002\005\007\000\002\006\007\000\002\006\005\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\010\005\000\002\011\004\000\002\011\003\000\002\012" +
    "\003\000\002\013\004\000\002\013\004\000\002\032\005" +
    "\000\002\016\005\000\002\016\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\031\004\000\002\031\004\000\002\031\004\000\002\020" +
    "\005\000\002\020\005\000\002\033\005\000\002\033\003" +
    "\000\002\026\015\000\002\026\011\000\002\025\011\000" +
    "\002\027\005\000\002\027\005\000\002\027\003\000\002" +
    "\030\011\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\024\005\000\002\024\003\000\002\021\005\000" +
    "\002\021\005\000\002\021\003\000\002\022\005\000\002" +
    "\022\005\000\002\022\005\000\002\022\005\000\002\022" +
    "\003\000\002\023\005\000\002\023\003\000\002\023\003" +
    "\000\002\023\014\000\002\023\013\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\202\000\006\040\007\042\005\001\002\000\004\042" +
    "\053\001\002\000\004\025\040\001\002\000\004\002\uffff" +
    "\001\002\000\004\052\013\001\002\000\004\002\011\001" +
    "\002\000\004\002\001\001\002\000\006\041\034\052\013" +
    "\001\002\000\010\032\015\033\016\034\020\001\002\000" +
    "\006\041\ufffc\052\ufffc\001\002\000\006\022\ufff8\053\ufff8" +
    "\001\002\000\006\022\ufff7\053\ufff7\001\002\000\006\022" +
    "\021\053\022\001\002\000\006\022\ufff6\053\ufff6\001\002" +
    "\000\010\032\015\033\016\034\020\001\002\000\004\024" +
    "\026\001\002\000\004\045\024\001\002\000\004\053\025" +
    "\001\002\000\006\041\ufffb\052\ufffb\001\002\000\004\052" +
    "\027\001\002\000\004\045\ufff9\001\002\000\006\022\021" +
    "\053\022\001\002\000\004\045\032\001\002\000\004\022" +
    "\033\001\002\000\004\045\ufffa\001\002\000\004\042\ufffe" +
    "\001\002\000\006\041\ufffd\052\ufffd\001\002\000\006\025" +
    "\ufff2\043\ufff2\001\002\000\006\025\040\043\050\001\002" +
    "\000\014\026\046\027\045\030\047\031\043\046\044\001" +
    "\002\000\006\025\ufff3\043\ufff3\001\002\000\006\025\ufff1" +
    "\043\ufff1\001\002\000\034\005\uffc2\006\uffc2\007\uffc2\010" +
    "\uffc2\011\uffc2\012\uffc2\014\uffc2\016\uffc2\020\uffc2\021\uffc2" +
    "\022\uffc2\025\uffc2\043\uffc2\001\002\000\006\025\ufff0\043" +
    "\ufff0\001\002\000\034\005\uffc4\006\uffc4\007\uffc4\010\uffc4" +
    "\011\uffc4\012\uffc4\014\uffc4\016\uffc4\020\uffc4\021\uffc4\022" +
    "\uffc4\025\uffc4\043\uffc4\001\002\000\034\005\uffc5\006\uffc5" +
    "\007\uffc5\010\uffc5\011\uffc5\012\uffc5\014\uffc5\016\uffc5\020" +
    "\uffc5\021\uffc5\022\uffc5\025\uffc5\043\uffc5\001\002\000\034" +
    "\005\uffc3\006\uffc3\007\uffc3\010\uffc3\011\uffc3\012\uffc3\014" +
    "\uffc3\016\uffc3\020\uffc3\021\uffc3\022\uffc3\025\uffc3\043\uffc3" +
    "\001\002\000\004\002\ufff5\001\002\000\006\025\ufff4\043" +
    "\ufff4\001\002\000\004\002\000\001\002\000\012\025\064" +
    "\035\054\036\061\045\063\001\002\000\004\013\177\001" +
    "\002\000\010\016\uffe9\022\uffe9\043\uffe9\001\002\000\010" +
    "\016\uffea\022\uffea\043\uffea\001\002\000\010\016\uffed\022" +
    "\uffed\043\uffed\001\002\000\010\016\uffec\022\uffec\043\uffec" +
    "\001\002\000\004\013\143\001\002\000\010\016\uffeb\022" +
    "\uffeb\043\uffeb\001\002\000\004\004\uffe2\001\002\000\016" +
    "\026\046\027\045\030\047\031\043\045\141\046\142\001" +
    "\002\000\006\022\135\043\136\001\002\000\004\004\067" +
    "\001\002\000\022\013\076\026\046\027\045\030\047\031" +
    "\043\044\077\045\073\046\075\001\002\000\032\005\uffc8" +
    "\006\uffc8\007\uffc8\010\uffc8\011\uffc8\012\uffc8\014\uffc8\016" +
    "\uffc8\020\uffc8\021\uffc8\022\uffc8\043\uffc8\001\002\000\032" +
    "\005\uffd0\006\uffd0\007\124\010\122\011\125\012\123\014" +
    "\uffd0\016\uffd0\020\uffd0\021\uffd0\022\uffd0\043\uffd0\001\002" +
    "\000\014\005\103\006\104\016\uffe5\022\uffe5\043\uffe5\001" +
    "\002\000\026\004\uffe3\005\uffc9\006\uffc9\007\uffc9\010\uffc9" +
    "\011\uffc9\012\uffc9\016\uffc9\022\uffc9\043\uffc9\001\002\000" +
    "\032\005\uffcb\006\uffcb\007\uffcb\010\uffcb\011\uffcb\012\uffcb" +
    "\014\uffcb\016\uffcb\020\uffcb\021\uffcb\022\uffcb\043\uffcb\001" +
    "\002\000\010\016\uffe4\022\uffe4\043\uffe4\001\002\000\020" +
    "\013\076\026\046\027\045\030\047\031\043\044\077\045" +
    "\102\001\002\000\004\013\100\001\002\000\020\013\076" +
    "\026\046\027\045\030\047\031\043\044\077\045\102\001" +
    "\002\000\010\005\103\006\104\021\105\001\002\000\032" +
    "\005\uffc9\006\uffc9\007\uffc9\010\uffc9\011\uffc9\012\uffc9\014" +
    "\uffc9\016\uffc9\020\uffc9\021\uffc9\022\uffc9\043\uffc9\001\002" +
    "\000\020\013\076\026\046\027\045\030\047\031\043\044" +
    "\077\045\102\001\002\000\020\013\076\026\046\027\045" +
    "\030\047\031\043\044\077\045\102\001\002\000\020\013" +
    "\076\026\046\027\045\030\047\031\043\044\077\045\102" +
    "\001\002\000\010\005\103\006\104\021\107\001\002\000" +
    "\004\017\110\001\002\000\022\013\076\020\111\026\046" +
    "\027\045\030\047\031\043\044\077\045\102\001\002\000" +
    "\004\014\120\001\002\000\012\005\103\006\104\020\uffd3" +
    "\022\uffd3\001\002\000\006\020\115\022\114\001\002\000" +
    "\020\013\076\026\046\027\045\030\047\031\043\044\077" +
    "\045\102\001\002\000\004\014\116\001\002\000\032\005" +
    "\uffc7\006\uffc7\007\uffc7\010\uffc7\011\uffc7\012\uffc7\014\uffc7" +
    "\016\uffc7\020\uffc7\021\uffc7\022\uffc7\043\uffc7\001\002\000" +
    "\012\005\103\006\104\020\uffd4\022\uffd4\001\002\000\032" +
    "\005\uffc6\006\uffc6\007\uffc6\010\uffc6\011\uffc6\012\uffc6\014" +
    "\uffc6\016\uffc6\020\uffc6\021\uffc6\022\uffc6\043\uffc6\001\002" +
    "\000\032\005\uffd1\006\uffd1\007\124\010\122\011\125\012" +
    "\123\014\uffd1\016\uffd1\020\uffd1\021\uffd1\022\uffd1\043\uffd1" +
    "\001\002\000\020\013\076\026\046\027\045\030\047\031" +
    "\043\044\077\045\102\001\002\000\020\013\076\026\046" +
    "\027\045\030\047\031\043\044\077\045\102\001\002\000" +
    "\020\013\076\026\046\027\045\030\047\031\043\044\077" +
    "\045\102\001\002\000\020\013\076\026\046\027\045\030" +
    "\047\031\043\044\077\045\102\001\002\000\032\005\uffcc" +
    "\006\uffcc\007\uffcc\010\uffcc\011\uffcc\012\uffcc\014\uffcc\016" +
    "\uffcc\020\uffcc\021\uffcc\022\uffcc\043\uffcc\001\002\000\032" +
    "\005\uffce\006\uffce\007\uffce\010\uffce\011\uffce\012\uffce\014" +
    "\uffce\016\uffce\020\uffce\021\uffce\022\uffce\043\uffce\001\002" +
    "\000\032\005\uffcd\006\uffcd\007\uffcd\010\uffcd\011\uffcd\012" +
    "\uffcd\014\uffcd\016\uffcd\020\uffcd\021\uffcd\022\uffcd\043\uffcd" +
    "\001\002\000\032\005\uffcf\006\uffcf\007\uffcf\010\uffcf\011" +
    "\uffcf\012\uffcf\014\uffcf\016\uffcf\020\uffcf\021\uffcf\022\uffcf" +
    "\043\uffcf\001\002\000\032\005\uffd2\006\uffd2\007\124\010" +
    "\122\011\125\012\123\014\uffd2\016\uffd2\020\uffd2\021\uffd2" +
    "\022\uffd2\043\uffd2\001\002\000\010\005\103\006\104\014" +
    "\134\001\002\000\032\005\uffca\006\uffca\007\uffca\010\uffca" +
    "\011\uffca\012\uffca\014\uffca\016\uffca\020\uffca\021\uffca\022" +
    "\uffca\043\uffca\001\002\000\012\025\064\035\054\036\061" +
    "\045\063\001\002\000\004\002\uffef\001\002\000\010\016" +
    "\uffee\022\uffee\043\uffee\001\002\000\010\016\uffe8\022\uffe8" +
    "\043\uffe8\001\002\000\010\016\uffe7\022\uffe7\043\uffe7\001" +
    "\002\000\010\016\uffe6\022\uffe6\043\uffe6\001\002\000\004" +
    "\013\145\001\002\000\010\014\uffdc\047\173\050\174\001" +
    "\002\000\020\013\076\026\046\027\045\030\047\031\043" +
    "\044\077\045\102\001\002\000\004\014\147\001\002\000" +
    "\004\015\150\001\002\000\012\025\064\035\054\036\061" +
    "\045\063\001\002\000\006\016\152\022\135\001\002\000" +
    "\012\016\uffe0\022\uffe0\037\153\043\uffe0\001\002\000\004" +
    "\015\154\001\002\000\012\025\064\035\054\036\061\045" +
    "\063\001\002\000\006\016\156\022\135\001\002\000\010" +
    "\016\uffe1\022\uffe1\043\uffe1\001\002\000\010\005\103\006" +
    "\104\014\160\001\002\000\016\052\161\053\164\054\163" +
    "\055\165\056\166\057\162\001\002\000\004\013\uffd9\001" +
    "\002\000\004\013\uffd5\001\002\000\004\013\uffd7\001\002" +
    "\000\004\013\uffda\001\002\000\004\013\uffd8\001\002\000" +
    "\004\013\uffd6\001\002\000\004\013\170\001\002\000\020" +
    "\013\076\026\046\027\045\030\047\031\043\044\077\045" +
    "\102\001\002\000\010\005\103\006\104\014\172\001\002" +
    "\000\010\014\uffdb\047\uffdb\050\uffdb\001\002\000\004\013" +
    "\145\001\002\000\004\013\145\001\002\000\004\014\uffdd" +
    "\001\002\000\004\014\uffde\001\002\000\004\013\145\001" +
    "\002\000\004\014\201\001\002\000\004\015\202\001\002" +
    "\000\012\025\064\035\054\036\061\045\063\001\002\000" +
    "\006\016\204\022\135\001\002\000\010\016\uffdf\022\uffdf" +
    "\043\uffdf\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\202\000\010\002\007\003\003\010\005\001\001\000" +
    "\004\032\051\001\001\000\010\011\036\012\040\013\035" +
    "\001\001\000\002\001\001\000\006\004\011\005\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\034" +
    "\001\001\000\004\007\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\022\001\001" +
    "\000\002\001\001\000\004\007\027\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\012\050\013\035\001\001\000\004\014\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\016\064\017\056\020\057\025\061\026\055" +
    "\031\054\033\065\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\137\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\014\067\021\071\022\070\023\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\014" +
    "\067\021\132\022\070\023\073\001\001\000\002\001\001" +
    "\000\012\014\067\021\100\022\070\023\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\014\067\022\131" +
    "\023\073\001\001\000\010\014\067\022\120\023\073\001" +
    "\001\000\012\014\067\021\105\022\070\023\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\014\067\021" +
    "\111\022\070\023\073\024\112\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\014\067\021" +
    "\116\022\070\023\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\014\067\023\130\001\001\000\006\014\067" +
    "\023\127\001\001\000\006\014\067\023\126\001\001\000" +
    "\006\014\067\023\125\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\017\136" +
    "\020\057\025\061\026\055\031\054\033\065\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\027\145\030\143\001" +
    "\001\000\002\001\001\000\012\014\067\021\156\022\070" +
    "\023\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\016\150\017\056\020\057\025\061\026\055\031\054" +
    "\033\065\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\016\154\017\056\020\057\025\061" +
    "\026\055\031\054\033\065\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\166\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\014\067\021\170\022\070\023\073\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\030\175" +
    "\001\001\000\004\030\174\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\027\177\030\143\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\016\202\017\056\020" +
    "\057\025\061\026\055\031\054\033\065\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



        private List<String> reglas = new ArrayList<String>();
        private static List<SymbolTableEntry> ts = new ArrayList<SymbolTableEntry>();
        private static String errorMsg;

        public parser(java_cup.runtime.Scanner s, ArrayList<SymbolTableEntry> table) {
                super(s);
                parser.ts = table;
        }

        // Metodo al que se llama automaticamente ante algun error sintactico.
        public void syntax_error(Symbol s){
                errorMsg = "Error en la linea " + (s.right - 1) + ". "
                + s + " no reconocido. valor " + s.value;
        }

        public List<String> getList() {
                return this.reglas;
        }
        
        public static List<SymbolTableEntry> getTS() {
                return ts;
        }

        public static String getErrorMsg() {
                return errorMsg;
        }

        public void agregarTipo(Object id, Object type) {
                for (SymbolTableEntry entrada : ts) {
                if (entrada.getToken().equals("ID") && entrada.getNombre().equals(id)) {
                        entrada.tipo = (String) type;
                }
                }
        }


        

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


        
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= codigo EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // codigo ::= definiciones programa 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoPrograma c = (NodoPrograma)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                RESULT = c;
                reglas.add("[Regla 0] codigo: El programa compila correctamente"); 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // codigo ::= programa_sin_variables 
            {
              Object RESULT =null;
		 reglas.add("[Regla 0] codigo: El programa compila correctamente"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // definiciones ::= DEFINE declaraciones DEFINE_END 
            {
              Object RESULT =null;
		 reglas.add("[Regla 1] DEFINE declaraciones DEFINE_END"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("definiciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaraciones ::= declaraciones inicio_declaracion 
            {
              Object RESULT =null;
		 reglas.add("[Regla 2] declaraciones inicio_declaracion"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaraciones ::= inicio_declaracion 
            {
              Object RESULT =null;
		 reglas.add("[Regla 3] inicio_declaracion"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // inicio_declaracion ::= OP_MEN tipo declaracion ID OP_MAY 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                reglas.add("[Regla 4] OP_MEN tipo declaracion ID OP_MAY"); 
                RESULT = id;
                agregarTipo(id, type);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio_declaracion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaracion ::= COMA tipo declaracion ID COMA 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                reglas.add("[Regla 5] COMA tipo declaracion ID COMA");
                RESULT = id;
                agregarTipo(id, type);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaracion ::= OP_MAY DOS_PUNTOS OP_MEN 
            {
              Object RESULT =null;
		 reglas.add("[Regla 6] OP_MAY DOS_PUNTOS OP_MEN"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tipo ::= INTEGER 
            {
              Object RESULT =null;
		int integerleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int integerright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object integer = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 reglas.add("[Regla 7] INTEGER"); RESULT = integer; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tipo ::= STRING 
            {
              Object RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object string = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 reglas.add("[Regla 8] STRING"); RESULT = string; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tipo ::= FLOAT 
            {
              Object RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 reglas.add("[Regla 9] FLOAT"); RESULT = fl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // programa_sin_variables ::= PROGRAM_BEGIN sentencias_sin_variables PROGRAM_END 
            {
              Object RESULT =null;
		 reglas.add("[Regla 10] PROGRAM_BEGIN sentencias_sin_variables PROGRAM_END"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa_sin_variables",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sentencias_sin_variables ::= sentencias_sin_variables sentencia_sin_variables 
            {
              Object RESULT =null;
		 reglas.add("[Regla 11] sentencias_sin_variables sentencia_sin_variables"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_sin_variables",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sentencias_sin_variables ::= sentencia_sin_variables 
            {
              Object RESULT =null;
		 reglas.add("[Regla 12] sentencia_sin_variables"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_sin_variables",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sentencia_sin_variables ::= impresion_sin_variables 
            {
              Object RESULT =null;
		 reglas.add("[Regla 13] impresion_sin_variables"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_sin_variables",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // impresion_sin_variables ::= WRITE const 
            {
              Object RESULT =null;
		 reglas.add("[Regla 14] WRITE const"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("impresion_sin_variables",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // impresion_sin_variables ::= WRITE CONST_STR 
            {
              Object RESULT =null;
		 reglas.add("[Regla 15] WRITE CONST_STR"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("impresion_sin_variables",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // programa ::= PROGRAM_BEGIN sentencias PROGRAM_END 
            {
              NodoPrograma RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<NodoSentencia> s = (List<NodoSentencia>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                RESULT = new NodoPrograma(s);
                reglas.add("[Regla 16] PROGRAM_BEGIN sentencias PROGRAM_END"); 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sentencias ::= sentencias COMA sentencia 
            {
              List<NodoSentencia> RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<NodoSentencia> ss = (List<NodoSentencia>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoSentencia s = (NodoSentencia)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                ss.add(s);
                RESULT = ss;
                reglas.add("[Regla 43] sentencias COMA sentencia"); 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sentencias ::= sentencia 
            {
              List<NodoSentencia> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoSentencia s = (NodoSentencia)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                List<NodoSentencia> ss = new ArrayList<NodoSentencia>();
                ss.add(s);
                RESULT = ss;
                reglas.add("[Regla 44] expresion"); 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sentencia ::= asignacion 
            {
              NodoSentencia RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoSentencia a = (NodoSentencia)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        RESULT = a;
                        reglas.add("[Regla 19] asignacion"); 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sentencia ::= iteracion 
            {
              NodoSentencia RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoCiclo i = (NodoCiclo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        RESULT = i; 
                        reglas.add("[Regla 20] iteracion"); 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sentencia ::= seleccion 
            {
              NodoSentencia RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoIf s = (NodoIf)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        RESULT = s;
                        reglas.add("[Regla 21] seleccion"); 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sentencia ::= impresion 
            {
              NodoSentencia RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoImpresion i = (NodoImpresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        RESULT = i; 
                        reglas.add("[Regla 22] impresion"); 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // impresion ::= WRITE const 
            {
              NodoImpresion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        RESULT = new NodoImpresion(c);
                        reglas.add("[Regla 23] WRITE const"); 
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("impresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // impresion ::= WRITE ID 
            {
              NodoImpresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        RESULT = new NodoImpresion(id); 
                        reglas.add("[Regla 24] WRITE ID"); 
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("impresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // impresion ::= WRITE CONST_STR 
            {
              NodoImpresion RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cs = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        RESULT = new NodoImpresion(cs);
                        reglas.add("[Regla 25] WRITE CONST_STR");
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("impresion",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // asignacion ::= identificador OP_ASIGN expresion 
            {
              NodoSentencia RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoExpresion e = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        RESULT = new NodoAsignacion(new NodoIdentificador(id), e);
                        reglas.add("[Regla 26] identificador OP_ASIGN expresion"); 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // asignacion ::= identificador OP_ASIGN CONST_STR 
            {
              NodoSentencia RESULT =null;
		 reglas.add("[Regla 27] identificador OP_ASIGN CONST_STR"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // identificador ::= identificador OP_ASIGN ID 
            {
              String RESULT =null;
		 reglas.add("[Regla 28] identificador OP_ASIGN ID"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identificador",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // identificador ::= ID 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                RESULT = id;
                reglas.add("[Regla 29] ID"); 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identificador",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // seleccion ::= IF PAREN_OPEN condicion PAREN_CLOSE BLOCK_BEG sentencias BLOCK_END ELSE BLOCK_BEG sentencias BLOCK_END 
            {
              NodoIf RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		NodoExpresionBooleana c = (NodoExpresionBooleana)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		List<NodoSentencia> s = (List<NodoSentencia>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int seleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int seright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<NodoSentencia> se = (List<NodoSentencia>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                RESULT = new NodoIf(c, s, se);
                reglas.add("[Regla 30] IF PAREN_OPEN condicion PAREN_CLOSE BLOCK_BEG sentencias BLOCK_END ELSE BLOCK_BEG sentencias BLOCK_END");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("seleccion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // seleccion ::= IF PAREN_OPEN condicion PAREN_CLOSE BLOCK_BEG sentencias BLOCK_END 
            {
              NodoIf RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		NodoExpresionBooleana c = (NodoExpresionBooleana)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<NodoSentencia> s = (List<NodoSentencia>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                RESULT = new NodoIf(c, s, null);
                reglas.add("[Regla 31] IF PAREN_OPEN condicion PAREN_CLOSE BLOCK_BEG sentencias BLOCK_END");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("seleccion",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // iteracion ::= WHILE PAREN_OPEN condicion PAREN_CLOSE BLOCK_BEG sentencias BLOCK_END 
            {
              NodoCiclo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		NodoExpresionBooleana c = (NodoExpresionBooleana)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<NodoSentencia> s = (List<NodoSentencia>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                RESULT = new NodoCiclo(c, s);
                reglas.add("[Regla 32] WHILE PAREN_OPEN condicion PAREN_CLOSE BLOCK_BEG sentencias BLOCK_END");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iteracion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // condicion ::= comparacion OP_AND comparacion 
            {
              NodoExpresionBooleana RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoExpresionBooleana c1 = (NodoExpresionBooleana)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoExpresionBooleana c2 = (NodoExpresionBooleana)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new NodoAnd(c1, c2);
                reglas.add("[Regla 33] comparacion OP_AND comparacion");
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // condicion ::= comparacion OP_OR comparacion 
            {
              NodoExpresionBooleana RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoExpresionBooleana c1 = (NodoExpresionBooleana)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoExpresionBooleana c2 = (NodoExpresionBooleana)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new NodoOr(c1, c2);
                reglas.add("[Regla 34] comparacion OP_OR comparacion"); 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // condicion ::= comparacion 
            {
              NodoExpresionBooleana RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoExpresionBooleana c = (NodoExpresionBooleana)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = c;
                reglas.add("[Regla 35] comparacion"); 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // comparacion ::= PAREN_OPEN expresion PAREN_CLOSE comparador PAREN_OPEN expresion PAREN_CLOSE 
            {
              NodoExpresionBooleana RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NodoExpresion ex1 = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoExpresion ex2 = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                RESULT = new NodoComparacion(c, ex1, ex2);
                reglas.add("[Regla 36] PAREN_OPEN expresion PAREN_CLOSE comparador PAREN_OPEN expresion PAREN_CLOSE"); 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // comparador ::= OP_MAY 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        RESULT = op;
                        reglas.add("[Regla 37] OP_MAY"); 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // comparador ::= OP_MEN 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        RESULT = op.toString();
                        reglas.add("[Regla 38] OP_MEN"); 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // comparador ::= OP_MEN_IG 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        RESULT = op; 
                        reglas.add("[Regla 39] OP_MEN_IG"); 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // comparador ::= OP_MAY_IG 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        RESULT = op; 
                        reglas.add("[Regla 40] OP_MAY_IG"); 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // comparador ::= OP_IG 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        RESULT = op; 
                        reglas.add("[Regla 41] OP_IG"); 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // comparador ::= OP_DIST 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        RESULT = op; 
                        reglas.add("[Regla 42] OP_DIST"); 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expresiones ::= expresiones COMA expresion 
            {
              List<NodoExpresion> RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<NodoExpresion> es = (List<NodoExpresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoExpresion e = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                es.add(e);
                RESULT = es;
                reglas.add("[Regla 43] expresiones COMA expresion"); 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expresiones ::= expresion 
            {
              List<NodoExpresion> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoExpresion e = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                List<NodoExpresion> exs = new ArrayList<NodoExpresion>();
                exs.add(e);
                RESULT = exs;
                reglas.add("[Regla 44] expresion"); 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expresion ::= expresion OP_SUMA termino 
            {
              NodoExpresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoExpresion e = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoExpresion t = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        RESULT = new NodoSuma(e, t);
                        reglas.add("[Regla 45] expresion OP_SUMA termino"); 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expresion ::= expresion OP_RESTA termino 
            {
              NodoExpresion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoExpresion e = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoExpresion t = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        RESULT = new NodoResta(e, t);
                        reglas.add("[Regla 46] expresion OP_RESTA termino"); 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expresion ::= termino 
            {
              NodoExpresion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoExpresion t = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        RESULT = t;
                        reglas.add("[Regla 47] termino"); 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // termino ::= termino OP_MULT factor 
            {
              NodoExpresion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoExpresion t = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoExpresion f = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        RESULT = new NodoMultiplicacion(t, f); 
                        reglas.add("[Regla 48] termino OP_MULT factor"); 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // termino ::= termino OP_DIV factor 
            {
              NodoExpresion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoExpresion t = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoExpresion f = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        RESULT = new NodoDivision(t, f);
                        reglas.add("[Regla 49] termono OP_DIV factor"); 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // termino ::= termino OP_POT factor 
            {
              NodoExpresion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoExpresion t = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoExpresion f = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        RESULT = new NodoPotencia(t, f);
                        reglas.add("[Regla 50] termino OP_POT factor"); 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // termino ::= termino OP_MOD factor 
            {
              NodoExpresion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoExpresion t = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoExpresion f = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        RESULT = new NodoModulo(t, f); 
                        reglas.add("[Regla 51] termino OP_MOD factor"); 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // termino ::= factor 
            {
              NodoExpresion RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoExpresion f = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        RESULT = f;
                        reglas.add("[Regla 52] factor"); 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // factor ::= PAREN_OPEN expresion PAREN_CLOSE 
            {
              NodoExpresion RESULT =null;
		 reglas.add("[Regla 53] PAREN_OPEN expresion PAREN_CLOSE"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // factor ::= ID 
            {
              NodoExpresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        RESULT = new NodoIdentificador(id);
                        reglas.add("[Regla 54] ID");
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // factor ::= const 
            {
              NodoExpresion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        RESULT = new NodoConstante(Integer.parseInt(c));
                        reglas.add("[Regla 55] const"); 
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // factor ::= MIDDLE PAREN_OPEN expresion PUNTO_COMA expresion PUNTO_COMA BRACK_OPEN expresiones BRACK_CLOSE PAREN_CLOSE 
            {
              NodoExpresion RESULT =null;
		int limInfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int limInfright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		NodoExpresion limInf = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int limSupleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int limSupright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NodoExpresion limSup = (NodoExpresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int listaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<NodoExpresion> lista = (List<NodoExpresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        RESULT = new NodoMiddle(limInf, limSup, lista);
                        reglas.add("[Regla 56] MIDDLE PAREN_OPEN expresion PUNTO_COMA expresion PUNTO_COMA BRACK_OPEN expresiones BRACK_CLOSE PAREN_CLOSE"); 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // factor ::= MIDDLE PAREN_OPEN expresion PUNTO_COMA expresion PUNTO_COMA BRACK_OPEN BRACK_CLOSE PAREN_CLOSE 
            {
              NodoExpresion RESULT =null;
		 
                        reglas.add("[Regla 57] MIDDLE PAREN_OPEN expresion PUNTO_COMA expresion PUNTO_COMA BRACK_OPEN BRACK_CLOSE PAREN_CLOSE"); 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // const ::= CONST_INT 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        reglas.add("[Regla 58] CONST_INT"); 
                        RESULT = i.toString(); 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // const ::= CONST_DOU 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        reglas.add("[Regla 59] CONST_DOU"); 
                        RESULT = d.toString(); 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // const ::= CONST_BIN 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        reglas.add("[Regla 60] CONST_BIN"); 
                        RESULT = b.toString(); 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // const ::= CONST_HEX 
            {
              String RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        reglas.add("[Regla 61] CONST_HEX"); 
                        RESULT = h.toString(); 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
