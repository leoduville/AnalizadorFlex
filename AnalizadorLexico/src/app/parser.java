
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package app;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\100\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\004\005\000\002\005\004\000\002\005\003" +
    "\000\002\006\007\000\002\007\007\000\002\007\005\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\011\005\000\002\012\004\000\002\012\003\000\002\013" +
    "\003\000\002\014\004\000\002\014\004\000\002\003\005" +
    "\000\002\015\004\000\002\015\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\017\004\000\002\017\004\000\002\017\004\000\002\020" +
    "\005\000\002\020\005\000\002\021\005\000\002\021\003" +
    "\000\002\022\015\000\002\022\011\000\002\023\011\000" +
    "\002\024\005\000\002\024\005\000\002\024\003\000\002" +
    "\025\011\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\027\005\000\002\027\003\000\002\030\005\000" +
    "\002\030\005\000\002\030\003\000\002\031\005\000\002" +
    "\031\005\000\002\031\005\000\002\031\005\000\002\031" +
    "\003\000\002\032\005\000\002\032\003\000\002\032\003" +
    "\000\002\032\014\000\002\032\013\000\002\033\003\000" +
    "\002\033\003\000\002\033\003\000\002\033\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\201\000\006\053\007\055\005\001\002\000\004\055" +
    "\053\001\002\000\004\036\040\001\002\000\004\002\uffff" +
    "\001\002\000\004\013\013\001\002\000\004\002\011\001" +
    "\002\000\004\002\001\001\002\000\006\013\013\054\034" +
    "\001\002\000\010\045\015\046\016\047\020\001\002\000" +
    "\006\013\ufffc\054\ufffc\001\002\000\006\014\ufff8\033\ufff8" +
    "\001\002\000\006\014\ufff7\033\ufff7\001\002\000\006\014" +
    "\022\033\021\001\002\000\006\014\ufff6\033\ufff6\001\002" +
    "\000\010\045\015\046\016\047\020\001\002\000\004\035" +
    "\026\001\002\000\004\037\024\001\002\000\004\014\025" +
    "\001\002\000\006\013\ufffb\054\ufffb\001\002\000\004\013" +
    "\027\001\002\000\004\037\ufff9\001\002\000\006\014\022" +
    "\033\021\001\002\000\004\037\032\001\002\000\004\033" +
    "\033\001\002\000\004\037\ufffa\001\002\000\004\055\ufffe" +
    "\001\002\000\006\013\ufffd\054\ufffd\001\002\000\006\036" +
    "\ufff2\056\ufff2\001\002\000\006\036\040\056\050\001\002" +
    "\000\014\040\046\041\045\042\044\043\047\044\043\001" +
    "\002\000\006\036\ufff3\056\ufff3\001\002\000\006\036\ufff1" +
    "\056\ufff1\001\002\000\042\005\uffc2\006\uffc2\007\uffc2\010" +
    "\uffc2\011\uffc2\012\uffc2\025\uffc2\027\uffc2\031\uffc2\032\uffc2" +
    "\033\uffc2\036\uffc2\037\uffc2\050\uffc2\051\uffc2\056\uffc2\001" +
    "\002\000\006\036\ufff0\056\ufff0\001\002\000\042\005\uffc4" +
    "\006\uffc4\007\uffc4\010\uffc4\011\uffc4\012\uffc4\025\uffc4\027" +
    "\uffc4\031\uffc4\032\uffc4\033\uffc4\036\uffc4\037\uffc4\050\uffc4" +
    "\051\uffc4\056\uffc4\001\002\000\042\005\uffc5\006\uffc5\007" +
    "\uffc5\010\uffc5\011\uffc5\012\uffc5\025\uffc5\027\uffc5\031\uffc5" +
    "\032\uffc5\033\uffc5\036\uffc5\037\uffc5\050\uffc5\051\uffc5\056" +
    "\uffc5\001\002\000\042\005\uffc3\006\uffc3\007\uffc3\010\uffc3" +
    "\011\uffc3\012\uffc3\025\uffc3\027\uffc3\031\uffc3\032\uffc3\033" +
    "\uffc3\036\uffc3\037\uffc3\050\uffc3\051\uffc3\056\uffc3\001\002" +
    "\000\004\002\ufff5\001\002\000\006\036\ufff4\056\ufff4\001" +
    "\002\000\004\002\000\001\002\000\012\036\064\037\063" +
    "\050\054\051\061\001\002\000\004\024\176\001\002\000" +
    "\016\027\uffe9\036\uffe9\037\uffe9\050\uffe9\051\uffe9\056\uffe9" +
    "\001\002\000\016\027\uffea\036\uffea\037\uffea\050\uffea\051" +
    "\uffea\056\uffea\001\002\000\016\027\uffed\036\uffed\037\uffed" +
    "\050\uffed\051\uffed\056\uffed\001\002\000\016\027\uffec\036" +
    "\uffec\037\uffec\050\uffec\051\uffec\056\uffec\001\002\000\004" +
    "\024\142\001\002\000\016\027\uffeb\036\uffeb\037\uffeb\050" +
    "\uffeb\051\uffeb\056\uffeb\001\002\000\004\004\uffe2\001\002" +
    "\000\016\037\140\040\046\041\045\042\141\043\047\044" +
    "\043\001\002\000\014\036\064\037\063\050\054\051\061" +
    "\056\136\001\002\000\004\004\067\001\002\000\022\024" +
    "\076\037\073\040\046\041\045\042\075\043\047\044\043" +
    "\057\077\001\002\000\042\005\uffc8\006\uffc8\007\uffc8\010" +
    "\uffc8\011\uffc8\012\uffc8\025\uffc8\027\uffc8\031\uffc8\032\uffc8" +
    "\033\uffc8\036\uffc8\037\uffc8\050\uffc8\051\uffc8\056\uffc8\001" +
    "\002\000\042\005\uffd0\006\uffd0\007\124\010\122\011\125" +
    "\012\123\025\uffd0\027\uffd0\031\uffd0\032\uffd0\033\uffd0\036" +
    "\uffd0\037\uffd0\050\uffd0\051\uffd0\056\uffd0\001\002\000\022" +
    "\005\103\006\104\027\uffe5\036\uffe5\037\uffe5\050\uffe5\051" +
    "\uffe5\056\uffe5\001\002\000\034\004\uffe3\005\uffc9\006\uffc9" +
    "\007\uffc9\010\uffc9\011\uffc9\012\uffc9\027\uffc9\036\uffc9\037" +
    "\uffc9\050\uffc9\051\uffc9\056\uffc9\001\002\000\042\005\uffcb" +
    "\006\uffcb\007\uffcb\010\uffcb\011\uffcb\012\uffcb\025\uffcb\027" +
    "\uffcb\031\uffcb\032\uffcb\033\uffcb\036\uffcb\037\uffcb\050\uffcb" +
    "\051\uffcb\056\uffcb\001\002\000\016\027\uffe4\036\uffe4\037" +
    "\uffe4\050\uffe4\051\uffe4\056\uffe4\001\002\000\020\024\076" +
    "\037\102\040\046\041\045\043\047\044\043\057\077\001" +
    "\002\000\004\024\100\001\002\000\020\024\076\037\102" +
    "\040\046\041\045\043\047\044\043\057\077\001\002\000" +
    "\010\005\103\006\104\032\105\001\002\000\042\005\uffc9" +
    "\006\uffc9\007\uffc9\010\uffc9\011\uffc9\012\uffc9\025\uffc9\027" +
    "\uffc9\031\uffc9\032\uffc9\033\uffc9\036\uffc9\037\uffc9\050\uffc9" +
    "\051\uffc9\056\uffc9\001\002\000\020\024\076\037\102\040" +
    "\046\041\045\043\047\044\043\057\077\001\002\000\020" +
    "\024\076\037\102\040\046\041\045\043\047\044\043\057" +
    "\077\001\002\000\020\024\076\037\102\040\046\041\045" +
    "\043\047\044\043\057\077\001\002\000\010\005\103\006" +
    "\104\032\107\001\002\000\004\030\110\001\002\000\022" +
    "\024\076\031\111\037\102\040\046\041\045\043\047\044" +
    "\043\057\077\001\002\000\004\025\120\001\002\000\012" +
    "\005\103\006\104\031\uffd3\033\uffd3\001\002\000\006\031" +
    "\115\033\114\001\002\000\020\024\076\037\102\040\046" +
    "\041\045\043\047\044\043\057\077\001\002\000\004\025" +
    "\116\001\002\000\042\005\uffc7\006\uffc7\007\uffc7\010\uffc7" +
    "\011\uffc7\012\uffc7\025\uffc7\027\uffc7\031\uffc7\032\uffc7\033" +
    "\uffc7\036\uffc7\037\uffc7\050\uffc7\051\uffc7\056\uffc7\001\002" +
    "\000\012\005\103\006\104\031\uffd4\033\uffd4\001\002\000" +
    "\042\005\uffc6\006\uffc6\007\uffc6\010\uffc6\011\uffc6\012\uffc6" +
    "\025\uffc6\027\uffc6\031\uffc6\032\uffc6\033\uffc6\036\uffc6\037" +
    "\uffc6\050\uffc6\051\uffc6\056\uffc6\001\002\000\042\005\uffd1" +
    "\006\uffd1\007\124\010\122\011\125\012\123\025\uffd1\027" +
    "\uffd1\031\uffd1\032\uffd1\033\uffd1\036\uffd1\037\uffd1\050\uffd1" +
    "\051\uffd1\056\uffd1\001\002\000\020\024\076\037\102\040" +
    "\046\041\045\043\047\044\043\057\077\001\002\000\020" +
    "\024\076\037\102\040\046\041\045\043\047\044\043\057" +
    "\077\001\002\000\020\024\076\037\102\040\046\041\045" +
    "\043\047\044\043\057\077\001\002\000\020\024\076\037" +
    "\102\040\046\041\045\043\047\044\043\057\077\001\002" +
    "\000\042\005\uffcc\006\uffcc\007\uffcc\010\uffcc\011\uffcc\012" +
    "\uffcc\025\uffcc\027\uffcc\031\uffcc\032\uffcc\033\uffcc\036\uffcc" +
    "\037\uffcc\050\uffcc\051\uffcc\056\uffcc\001\002\000\042\005" +
    "\uffce\006\uffce\007\uffce\010\uffce\011\uffce\012\uffce\025\uffce" +
    "\027\uffce\031\uffce\032\uffce\033\uffce\036\uffce\037\uffce\050" +
    "\uffce\051\uffce\056\uffce\001\002\000\042\005\uffcd\006\uffcd" +
    "\007\uffcd\010\uffcd\011\uffcd\012\uffcd\025\uffcd\027\uffcd\031" +
    "\uffcd\032\uffcd\033\uffcd\036\uffcd\037\uffcd\050\uffcd\051\uffcd" +
    "\056\uffcd\001\002\000\042\005\uffcf\006\uffcf\007\uffcf\010" +
    "\uffcf\011\uffcf\012\uffcf\025\uffcf\027\uffcf\031\uffcf\032\uffcf" +
    "\033\uffcf\036\uffcf\037\uffcf\050\uffcf\051\uffcf\056\uffcf\001" +
    "\002\000\042\005\uffd2\006\uffd2\007\124\010\122\011\125" +
    "\012\123\025\uffd2\027\uffd2\031\uffd2\032\uffd2\033\uffd2\036" +
    "\uffd2\037\uffd2\050\uffd2\051\uffd2\056\uffd2\001\002\000\010" +
    "\005\103\006\104\025\134\001\002\000\042\005\uffca\006" +
    "\uffca\007\uffca\010\uffca\011\uffca\012\uffca\025\uffca\027\uffca" +
    "\031\uffca\032\uffca\033\uffca\036\uffca\037\uffca\050\uffca\051" +
    "\uffca\056\uffca\001\002\000\016\027\uffee\036\uffee\037\uffee" +
    "\050\uffee\051\uffee\056\uffee\001\002\000\004\002\uffef\001" +
    "\002\000\016\027\uffe8\036\uffe8\037\uffe8\050\uffe8\051\uffe8" +
    "\056\uffe8\001\002\000\016\027\uffe7\036\uffe7\037\uffe7\050" +
    "\uffe7\051\uffe7\056\uffe7\001\002\000\016\027\uffe6\036\uffe6" +
    "\037\uffe6\050\uffe6\051\uffe6\056\uffe6\001\002\000\004\024" +
    "\144\001\002\000\010\021\172\022\173\025\uffdc\001\002" +
    "\000\020\024\076\037\102\040\046\041\045\043\047\044" +
    "\043\057\077\001\002\000\004\025\146\001\002\000\004" +
    "\026\147\001\002\000\012\036\064\037\063\050\054\051" +
    "\061\001\002\000\014\027\151\036\064\037\063\050\054" +
    "\051\061\001\002\000\020\027\uffe0\036\uffe0\037\uffe0\050" +
    "\uffe0\051\uffe0\052\152\056\uffe0\001\002\000\004\026\153" +
    "\001\002\000\012\036\064\037\063\050\054\051\061\001" +
    "\002\000\014\027\155\036\064\037\063\050\054\051\061" +
    "\001\002\000\016\027\uffe1\036\uffe1\037\uffe1\050\uffe1\051" +
    "\uffe1\056\uffe1\001\002\000\010\005\103\006\104\025\157" +
    "\001\002\000\016\013\160\014\163\015\162\016\164\017" +
    "\165\020\161\001\002\000\004\024\uffd9\001\002\000\004" +
    "\024\uffd5\001\002\000\004\024\uffd7\001\002\000\004\024" +
    "\uffda\001\002\000\004\024\uffd8\001\002\000\004\024\uffd6" +
    "\001\002\000\004\024\167\001\002\000\020\024\076\037" +
    "\102\040\046\041\045\043\047\044\043\057\077\001\002" +
    "\000\010\005\103\006\104\025\171\001\002\000\010\021" +
    "\uffdb\022\uffdb\025\uffdb\001\002\000\004\024\144\001\002" +
    "\000\004\024\144\001\002\000\004\025\uffdd\001\002\000" +
    "\004\025\uffde\001\002\000\004\024\144\001\002\000\004" +
    "\025\200\001\002\000\004\026\201\001\002\000\012\036" +
    "\064\037\063\050\054\051\061\001\002\000\014\027\203" +
    "\036\064\037\063\050\054\051\061\001\002\000\016\027" +
    "\uffdf\036\uffdf\037\uffdf\050\uffdf\051\uffdf\056\uffdf\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\201\000\010\002\007\004\003\011\005\001\001\000" +
    "\004\003\051\001\001\000\010\012\036\013\040\014\035" +
    "\001\001\000\002\001\001\000\006\005\011\006\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\034" +
    "\001\001\000\004\010\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\022\001\001" +
    "\000\002\001\001\000\004\010\027\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\013\050\014\035\001\001\000\004\033\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\015\064\016\056\017\054\020\057\021\065" +
    "\022\055\023\061\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\033\136\001\001\000\016\016\134\017\054\020\057" +
    "\021\065\022\055\023\061\001\001\000\002\001\001\000" +
    "\012\030\071\031\070\032\073\033\067\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\030\132" +
    "\031\070\032\073\033\067\001\001\000\002\001\001\000" +
    "\012\030\100\031\070\032\073\033\067\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\031\131\032\073\033" +
    "\067\001\001\000\010\031\120\032\073\033\067\001\001" +
    "\000\012\030\105\031\070\032\073\033\067\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\027\112\030\111" +
    "\031\070\032\073\033\067\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\030\116\031\070" +
    "\032\073\033\067\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\032\130\033\067\001\001\000\006\032\127\033" +
    "\067\001\001\000\006\032\126\033\067\001\001\000\006" +
    "\032\125\033\067\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\024\144\025\142\001\001\000\002\001" +
    "\001\000\012\030\155\031\070\032\073\033\067\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\015\147\016" +
    "\056\017\054\020\057\021\065\022\055\023\061\001\001" +
    "\000\016\016\134\017\054\020\057\021\065\022\055\023" +
    "\061\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\015\153\016\056\017\054\020\057\021\065\022\055\023" +
    "\061\001\001\000\016\016\134\017\054\020\057\021\065" +
    "\022\055\023\061\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\165\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\030\167" +
    "\031\070\032\073\033\067\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\025\174\001\001\000\004\025\173" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\024" +
    "\176\025\142\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\015\201\016\056\017\054\020\057\021\065\022" +
    "\055\023\061\001\001\000\016\016\134\017\054\020\057" +
    "\021\065\022\055\023\061\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private List<String> reglas = new ArrayList<String>();
    private static List<SymbolTableEntry> ts = new ArrayList<SymbolTableEntry>();
    private static String errorMsg;

    public parser(java_cup.runtime.Scanner s, ArrayList<SymbolTableEntry> table) {
        super(s);
        parser.ts = table;
    }

    // Metodo al que se llama automaticamente ante algun error sintactico.
    public void syntax_error(Symbol s){
        errorMsg = "Error en la linea " + (s.right - 1) + ". "
            + s + " no reconocido. valor " + s.value;
    }

    public List<String> getList() {
        return this.reglas;
    }
    
    public static List<SymbolTableEntry> getTS() {
        return ts;
    }

    public static String getErrorMsg() {
        return errorMsg;
    }

    public void agregarTipo(Object id, Object type) {
        for (SymbolTableEntry entrada : ts) {
            if (entrada.getToken().equals("ID") && entrada.getNombre().equals(id)) {
                entrada.tipo = (String) type;
            }
        }
  }




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {

 


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= codigo EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // codigo ::= definiciones programa 
            {
              Object RESULT =null;
		 reglas.add("[Regla 0] codigo: El programa compila correctamente"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // codigo ::= programa_sin_variables 
            {
              Object RESULT =null;
		 reglas.add("[Regla 0] codigo: El programa compila correctamente"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // definiciones ::= DEFINE declaraciones DEFINE_END 
            {
              Object RESULT =null;
		 reglas.add("[Regla 1] DEFINE declaraciones DEFINE_END"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("definiciones",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaraciones ::= declaraciones inicio_declaracion 
            {
              Object RESULT =null;
		 reglas.add("[Regla 2] declaraciones inicio_declaracion"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaraciones ::= inicio_declaracion 
            {
              Object RESULT =null;
		 reglas.add("[Regla 3] inicio_declaracion"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaraciones",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // inicio_declaracion ::= OP_MEN tipo declaracion ID OP_MAY 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
    reglas.add("[Regla 4] OP_MEN tipo declaracion ID OP_MAY"); 
    RESULT = id;
    agregarTipo(id, type);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio_declaracion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaracion ::= COMA tipo declaracion ID COMA 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
    reglas.add("[Regla 5] COMA tipo declaracion ID COMA");
    RESULT = id;
    agregarTipo(id, type);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaracion ::= OP_MAY DOS_PUNTOS OP_MEN 
            {
              Object RESULT =null;
		 reglas.add("[Regla 6] OP_MAY DOS_PUNTOS OP_MEN"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tipo ::= INTEGER 
            {
              Object RESULT =null;
		int integerleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int integerright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object integer = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 reglas.add("[Regla 7] INTEGER /" + integer); RESULT = integer; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tipo ::= STRING 
            {
              Object RESULT =null;
		int stringleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stringright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object string = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 reglas.add("[Regla 8] STRING /" + string); RESULT = string; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tipo ::= FLOAT 
            {
              Object RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object fl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 reglas.add("[Regla 9] FLOAT /" + fl); RESULT = fl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // programa_sin_variables ::= PROGRAM_BEGIN sentencias_sin_variables PROGRAM_END 
            {
              Object RESULT =null;
		 reglas.add("[Regla 10] PROGRAM_BEGIN sentencias_sin_variables PROGRAM_END"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa_sin_variables",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sentencias_sin_variables ::= sentencias_sin_variables sentencia_sin_variables 
            {
              Object RESULT =null;
		 reglas.add("[Regla 11] sentencias_sin_variables sentencia_sin_variables"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_sin_variables",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sentencias_sin_variables ::= sentencia_sin_variables 
            {
              Object RESULT =null;
		 reglas.add("[Regla 12] sentencia_sin_variables"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias_sin_variables",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sentencia_sin_variables ::= impresion_sin_variables 
            {
              Object RESULT =null;
		 reglas.add("[Regla 13] impresion_sin_variables"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia_sin_variables",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // impresion_sin_variables ::= WRITE const 
            {
              Object RESULT =null;
		 reglas.add("[Regla 14] WRITE const"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("impresion_sin_variables",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // impresion_sin_variables ::= WRITE CONST_STR 
            {
              Object RESULT =null;
		 reglas.add("[Regla 15] WRITE CONST_STR"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("impresion_sin_variables",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // programa ::= PROGRAM_BEGIN sentencias PROGRAM_END 
            {
              Object RESULT =null;
		 reglas.add("[Regla 16] PROGRAM_BEGIN sentencias PROGRAM_END"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sentencias ::= sentencias sentencia 
            {
              Object RESULT =null;
		 reglas.add("[Regla 17] sentencias sentencia"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sentencias ::= sentencia 
            {
              Object RESULT =null;
		 reglas.add("[Regla 18] sentencia"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencias",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sentencia ::= asignacion 
            {
              Object RESULT =null;
		 reglas.add("[Regla 19] asignacion"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sentencia ::= iteracion 
            {
              Object RESULT =null;
		 reglas.add("[Regla 20] iteracion"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sentencia ::= seleccion 
            {
              Object RESULT =null;
		 reglas.add("[Regla 21] seleccion"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sentencia ::= impresion 
            {
              Object RESULT =null;
		 reglas.add("[Regla 22] impresion"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // impresion ::= WRITE const 
            {
              Object RESULT =null;
		 reglas.add("[Regla 23] WRITE const"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("impresion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // impresion ::= WRITE ID 
            {
              Object RESULT =null;
		 reglas.add("[Regla 24] WRITE ID"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("impresion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // impresion ::= WRITE CONST_STR 
            {
              Object RESULT =null;
		reglas.add("[Regla 25] WRITE CONST_STR");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("impresion",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // asignacion ::= identificador OP_ASIGN expresion 
            {
              Object RESULT =null;
		 reglas.add("[Regla 26] identificador OP_ASIGN expresion"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // asignacion ::= identificador OP_ASIGN CONST_STR 
            {
              Object RESULT =null;
		 reglas.add("[Regla 27] identificador OP_ASIGN CONST_STR"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // identificador ::= identificador OP_ASIGN ID 
            {
              Object RESULT =null;
		 reglas.add("[Regla 28] identificador OP_ASIGN ID"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identificador",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // identificador ::= ID 
            {
              Object RESULT =null;
		 reglas.add("[Regla 29] ID"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identificador",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // seleccion ::= IF PAREN_OPEN condicion PAREN_CLOSE BLOCK_BEG sentencias BLOCK_END ELSE BLOCK_BEG sentencias BLOCK_END 
            {
              Object RESULT =null;
		 
    reglas.add("[Regla 30] IF PAREN_OPEN condicion PAREN_CLOSE BLOCK_BEG sentencias BLOCK_END ELSE BLOCK_BEG sentencias BLOCK_END");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seleccion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // seleccion ::= IF PAREN_OPEN condicion PAREN_CLOSE BLOCK_BEG sentencias BLOCK_END 
            {
              Object RESULT =null;
		 
    reglas.add("[Regla 31] IF PAREN_OPEN condicion PAREN_CLOSE BLOCK_BEG sentencias BLOCK_END");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seleccion",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // iteracion ::= WHILE PAREN_OPEN condicion PAREN_CLOSE BLOCK_BEG sentencias BLOCK_END 
            {
              Object RESULT =null;
		
    reglas.add("[Regla 32] WHILE PAREN_OPEN condicion PAREN_CLOSE BLOCK_BEG sentencias BLOCK_END");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("iteracion",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // condicion ::= comparacion OP_AND comparacion 
            {
              Object RESULT =null;
		
    reglas.add("[Regla 33] comparacion OP_AND comparacion");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // condicion ::= comparacion OP_OR comparacion 
            {
              Object RESULT =null;
		 reglas.add("[Regla 34] comparacion OP_OR comparacion"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // condicion ::= comparacion 
            {
              Object RESULT =null;
		 reglas.add("[Regla 35] comparacion"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // comparacion ::= PAREN_OPEN expresion PAREN_CLOSE comparador PAREN_OPEN expresion PAREN_CLOSE 
            {
              Object RESULT =null;
		 
    reglas.add("[Regla 36] PAREN_OPEN expresion PAREN_CLOSE comparador PAREN_OPEN expresion PAREN_CLOSE");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparacion",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // comparador ::= OP_MAY 
            {
              Object RESULT =null;
		 reglas.add("[Regla 37] OP_MAY"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // comparador ::= OP_MEN 
            {
              Object RESULT =null;
		 reglas.add("[Regla 38] OP_MEN"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // comparador ::= OP_MEN_IG 
            {
              Object RESULT =null;
		 reglas.add("[Regla 39] OP_MEN_IG"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // comparador ::= OP_MAY_IG 
            {
              Object RESULT =null;
		 reglas.add("[Regla 40] OP_MAY_IG"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // comparador ::= OP_IG 
            {
              Object RESULT =null;
		 reglas.add("[Regla 41] OP_IG"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // comparador ::= OP_DIST 
            {
              Object RESULT =null;
		 reglas.add("[Regla 42] OP_DIST"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("comparador",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expresiones ::= expresiones COMA expresion 
            {
              Object RESULT =null;
		 reglas.add("[Regla 43] expresiones COMA expresion"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expresiones ::= expresion 
            {
              Object RESULT =null;
		 reglas.add("[Regla 44] expresion"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresiones",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expresion ::= expresion OP_SUMA termino 
            {
              Object RESULT =null;
		 reglas.add("[Regla 45] expresion OP_SUMA termino"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expresion ::= expresion OP_RESTA termino 
            {
              Object RESULT =null;
		 reglas.add("[Regla 46] expresion OP_RESTA termino"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expresion ::= termino 
            {
              Object RESULT =null;
		 reglas.add("[Regla 47] termino"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // termino ::= termino OP_MULT factor 
            {
              Object RESULT =null;
		 reglas.add("[Regla 48] termino OP_MULT factor"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // termino ::= termino OP_DIV factor 
            {
              Object RESULT =null;
		 reglas.add("[Regla 49] termono OP_DIV factor"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // termino ::= termino OP_POT factor 
            {
              Object RESULT =null;
		 reglas.add("[Regla 50] termino OP_POT factor"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // termino ::= termino OP_MOD factor 
            {
              Object RESULT =null;
		 reglas.add("[Regla 51] termino OP_MOD factor"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // termino ::= factor 
            {
              Object RESULT =null;
		 reglas.add("[Regla 52] factor"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termino",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // factor ::= PAREN_OPEN expresion PAREN_CLOSE 
            {
              Object RESULT =null;
		 reglas.add("[Regla 53] PAREN_OPEN expresion PAREN_CLOSE"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // factor ::= ID 
            {
              Object RESULT =null;
		 reglas.add("[Regla 54] ID"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // factor ::= const 
            {
              Object RESULT =null;
		 reglas.add("[Regla 55] const"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // factor ::= MIDDLE PAREN_OPEN expresion PUNTO_COMA expresion PUNTO_COMA BRACK_OPEN expresiones BRACK_CLOSE PAREN_CLOSE 
            {
              Object RESULT =null;
		 
    reglas.add("[Regla 56] MIDDLE PAREN_OPEN expresion PUNTO_COMA expresion PUNTO_COMA BRACK_OPEN expresiones BRACK_CLOSE PAREN_CLOSE"); 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // factor ::= MIDDLE PAREN_OPEN expresion PUNTO_COMA expresion PUNTO_COMA BRACK_OPEN BRACK_CLOSE PAREN_CLOSE 
            {
              Object RESULT =null;
		 
    reglas.add("[Regla 57] MIDDLE PAREN_OPEN expresion PUNTO_COMA expresion PUNTO_COMA BRACK_OPEN BRACK_CLOSE PAREN_CLOSE"); 

              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // const ::= CONST_INT 
            {
              Object RESULT =null;
		 reglas.add("[Regla 58] CONST_INT"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // const ::= CONST_DOU 
            {
              Object RESULT =null;
		 reglas.add("[Regla 59] CONST_DOU"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // const ::= CONST_BIN 
            {
              Object RESULT =null;
		 reglas.add("[Regla 60] CONST_BIN"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // const ::= CONST_HEX 
            {
              Object RESULT =null;
		 reglas.add("[Regla 61] CONST_HEX"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("const",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
